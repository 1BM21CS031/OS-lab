#include <stdio.h>
#include <stdbool.h>

#define MAX_FRAMES 4

void printFrames(int frames[], int n) 
{
    for (int i = 0; i < n; i++) 
    {
        if (frames[i] == -1) 
            printf("- ");
         else 
            printf("%d ", frames[i]);
    }
    printf("\n");
}

int findLRUIndex(int counters[], int n) 
{
    int minIndex = 0;
    for (int i = 1; i < n; i++) 
    {
        if (counters[i] < counters[minIndex]) 
            minIndex = i;
    }
    return minIndex;
}

int findOptimalIndex(int pages[], int frames[], int n, int start) 
{
    int index = -1;
    int farthest = start;
    for (int i = 0; i < n; i++) 
    {
        int j;
        for (j = start; j < n; j++) 
        {
            if (frames[i] == pages[j]) 
            {
                if (j > farthest) 
                {
                    farthest = j;
                    index = i;
                }
                break;
            }
        }
        if (j == n) 
            return i;
    }
    return (index == -1) ? 0 : index;
}

void fifo(int pages[], int n) 
{
    int frames[MAX_FRAMES];
    int frameIndex = 0;

    for (int i = 0; i < MAX_FRAMES; i++) 
        frames[i] = -1;

    printf("FIFO Page Replacement Algorithm:\n");
    int pageFaults = 0;

    for (int i = 0; i < n; i++) 
    {
        int page = pages[i];
        bool pageFound = false;

        for (int j = 0; j < MAX_FRAMES; j++) 
        {
            if (frames[j] == page) 
            {
                pageFound = true;
                break;
            }
        }

        if (!pageFound) 
        {
            frames[frameIndex] = page;
            frameIndex = (frameIndex + 1) % MAX_FRAMES;
            pageFaults++;
        }

        printFrames(frames, MAX_FRAMES);
    }

    printf("Total Page Faults: %d\n\n", pageFaults);
}

void lru(int pages[], int n) 
{
    int frames[MAX_FRAMES];
    int counters[MAX_FRAMES] = {0};

    for (int i = 0; i < MAX_FRAMES; i++) 
        frames[i] = -1;

    printf("LRU Page Replacement Algorithm:\n");
    int pageFaults = 0;

    for (int i = 0; i < n; i++) 
    {
        int page = pages[i];
        bool pageFound = false;

        for (int j = 0; j < MAX_FRAMES; j++) 
        {
            if (frames[j] == page) 
            {
                pageFound = true;
                counters[j] = i;
                break;
            }
        }

        if (!pageFound) 
        {
            int lruIndex = findLRUIndex(counters, MAX_FRAMES);
            frames[lruIndex] = page;
            counters[lruIndex] = i;
            pageFaults++;
        }

        printFrames(frames, MAX_FRAMES);
    }

    printf("Total Page Faults: %d\n\n", pageFaults);
}

void optimal(int pages[], int n) 
{
    int frames[MAX_FRAMES];

    for (int i = 0; i < MAX_FRAMES; i++) 
        frames[i] = -1;

    printf("Optimal Page Replacement Algorithm:\n");
    int pageFaults = 0;

    for (int i = 0; i < n; i++) 
    {
        int page = pages[i];
        bool pageFound = false;

        for (int j = 0; j < MAX_FRAMES; j++) 
        {
            if (frames[j] == page) 
            {
                pageFound = true;
                break;
            }
        }

        if (!pageFound) 
        {
            int optimalIndex = findOptimalIndex(pages, frames, n, i + 1);
            frames[optimalIndex] = page;
            pageFaults++;
        }

        printFrames(frames, MAX_FRAMES);
    }

    printf("Total Page Faults: %d\n\n", pageFaults);
}

int main() 
{
    int n;
    printf("enter the number of pages:\n");
    scanf("%d",&n);
    int pages[n] ;
    printf("enter the page indexes:\n");
    for(int i=0;i<n;i++)
        scanf("%d",&pages[i]);

    int choice;
    do {
        printf("Page Replacement Algorithms:\n");
        printf("1. FIFO\n");
        printf("2. LRU\n");
        printf("3. Optimal\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) 
        {
            case 1:
                fifo(pages, n);
                break;
            case 2:
                lru(pages, n);
                break;
            case 3:
                optimal(pages, n);
                break;
            case 4:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please select a valid option.\n");
        }
    } while (choice != 4);

    return 0;
}
